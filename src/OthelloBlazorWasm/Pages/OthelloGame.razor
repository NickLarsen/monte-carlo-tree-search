@page "/othello"
@inject IJSRuntime jsRuntime
@using mcts

<h3>Othello</h3>

@if (gameCompleted) 
{
    <div id="winner" data-player="@winner.ToString()">
        @if (winner == PlayerId.None)
        {
            <span>The game was a tie!</span>
        }
        else
        {
            string winnerName = winner == PlayerId.Player1 ? "RED" : "BLUE";
            <span>@winnerName won the game!</span>
        }
        <small>Refresh the page to play again.</small>
    </div>
}
<div  class="float-right">
    <div id="score">
        <div class="player1">@GetScore(PlayerId.Player1)</div>
        <div class="player2">@GetScore(PlayerId.Player2)</div>
    </div>
    <button @onclick="HandleHelpMe">HELP ME!</button>
    <h3>AI Estimates</h3>
    <div>Total Sims: @aiSimulations</div>
    <ul id="estimates">
        @foreach(var (move, score) in aiValues)
        {
            <li><em>@move</em>: @score.ToString("0.0000")</li>
        }
    </ul>
</div>

<div id="game">
    @for (int i = 0; i < 64; i++)
    {
        int j = i;
        <div id="@i" class="cell" title="@i" style="background-color:@GetBgScore(i)" data-player="@GetPlayer(i)" data-valid-move="@GetIsValidMove(i)" @onclick="@((args) => MakeMove(j))"></div>
    }
</div>

@code {
    Othello game;
    PlayerId[] cells;
    Dictionary<string, double> aiValues = new Dictionary<string, double>();
    Dictionary<int, double> helpValues = new Dictionary<int, double>();
    long aiSimulations = 0;
    const int millisecondsPerMove = 1000;
    bool gameCompleted = false;
    PlayerId winner;

    protected override async Task OnInitializedAsync()
    {
        await Prerender(new Othello());
    }

    async Task Prerender(Othello move)
    {
        game = move;
        // auto skip
        while (!game.IsTerminal(out winner))
        {
            var nextSuccessor = game.ExpandSuccessors()[0];
            if (nextSuccessor.DescribeLastMove() == "64") {
                game = (Othello)nextSuccessor;
            } else {
                break;
            }
        }
        cells = game.GetBoard();
        helpValues.Clear();
        try
        {
            await jsRuntime.InvokeAsync<string>("console.log", game.LastPlayersTurn + ": valid move selected: " + game.DescribeLastMove());
        }
        catch { /* who cares, we're just logging some stuff */ }
        // terminal?
        gameCompleted = game.IsTerminal(out winner);
        StateHasChanged();
        if (game.CurrentPlayersTurn == PlayerId.Player2) {
            await AiMove();
        }
    }

    string GetPlayer(int i)
    {
        return cells[i].ToString();
    }

    string GetIsValidMove(int i)
    {
        return game.IsValidMove(1ul << i).ToString();
    }

    async void MakeMove(int i)
    {
        ulong move = 1ul << i;
        if (game.CurrentPlayersTurn == PlayerId.Player1 && game.IsValidMove(move))
        {
            await HumanMove(move);
        }
        else
        {
            await jsRuntime.InvokeAsync<string>("console.log", game.CurrentPlayersTurn + ": invalid move selected: " + i);
        }
    }

    async Task HumanMove(ulong move)
    {
        var next = game.ApplyMove(move);
        await Prerender(next);
    }

    async Task AiMove()
    {
        var (next, estimates, totalSimulations) = mcts.MonteCarloTreeSearch.Search(game, millisecondsPerMove);
        aiSimulations = totalSimulations;
        aiValues = estimates.ToDictionary(m => m.Key, m => m.Value.PureMonteCarloScore);
        await Prerender((Othello)next);
    }

    async Task HandleHelpMe()
    {
        await jsRuntime.InvokeAsync<string>("console.log", "attempting to help");
        var (next, estimates, totalSimulations) = mcts.MonteCarloTreeSearch.Search(game, millisecondsPerMove);
        helpValues = estimates.ToDictionary(m => Convert.ToInt32(m.Key), m => m.Value.PureMonteCarloScore);
        await jsRuntime.InvokeAsync<string>("console.log", "attempting to help: " + helpValues.First().ToString());
        StateHasChanged();
    }

    string GetBgScore(int i)
    {
        if (!helpValues.ContainsKey(i)) return "rgba(0,0,0,0)";
        double estimate = helpValues[i];
        if (estimate > 0.5) {
            return $"rgba(255,0,0,{(estimate-0.5)/0.5})";
        }
        return $"rgba(0,0,255,{(0.5-estimate)/0.5})";
    }

    int GetScore(PlayerId player)
    {
        return cells.Count(m => m == player);
    }
}
