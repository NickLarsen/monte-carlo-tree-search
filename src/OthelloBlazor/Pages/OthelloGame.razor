@page "/othello"
@inject IJSRuntime jsRuntime
@using mcts

<h3>Othello</h3>

@if (gameCompleted) 
{
    <div id="winner">
        @if (winner == PlayerId.None)
        {
            <span>The game was a tie!</span>
        }
        else
        {
            <span>@winner.ToString() won the game!</span>
        }
    </div>
}
<div id="score" class="float-right">
    <div class="player1">@GetScore(PlayerId.Player1)</div>
    <div class="player2">@GetScore(PlayerId.Player2)</div>
</div>

<div id="game">
    @for (int i = 0; i < 64; i++)
    {
        int j = i;
        <div id="@i" class="cell" data-player="@GetPlayer(i)" data-valid-move="@GetIsValidMove(i)" @onclick="@((args) => MakeMove(j))"></div>
    }
</div>

@code {
    Othello game;
    PlayerId[] cells;
    mcts.MonteCarloTreeSearchPlayer ai = new MonteCarloTreeSearchPlayer(1000);
    bool gameCompleted = false;
    PlayerId winner;

    protected override async Task OnInitializedAsync()
    {
        await Prerender(new Othello());
    }

    async Task Prerender(Othello move)
    {
        game = move;
        // auto skip
        while (!game.IsTerminal(out winner))
        {
            var nextSuccessor = game.ExpandSuccessors()[0];
            if (nextSuccessor.DescribeLastMove() == "64") {
                game = (Othello)nextSuccessor;
            } else {
                break;
            }
        }
        cells = game.GetBoard();
        try
        {
            await jsRuntime.InvokeAsync<string>("console.log", game.LastPlayersTurn + ": valid move selected: " + game.DescribeLastMove());
        }
        catch { /* who cares, we're just logging some stuff */ }
        // terminal?
        gameCompleted = game.IsTerminal(out winner);
        StateHasChanged();
        if (game.CurrentPlayersTurn == PlayerId.Player2) {
            await AiMove();
        }
    }

    string GetPlayer(int i)
    {
        return cells[i].ToString();
    }

    string GetIsValidMove(int i)
    {
        return game.IsValidMove(1ul << i).ToString();
    }

    async void MakeMove(int i)
    {
        ulong move = 1ul << i;
        if (game.CurrentPlayersTurn == PlayerId.Player1 && game.IsValidMove(move))
        {
            await HumanMove(move);
        }
        else
        {
            await jsRuntime.InvokeAsync<string>("console.log", game.CurrentPlayersTurn + ": invalid move selected: " + i);
        }
    }

    async Task HumanMove(ulong move)
    {
        var next = game.ApplyMove(move);
        await Prerender(next);
    }

    async Task AiMove()
    {
        var next = (Othello)ai.MakeMove(game, game.ExpandSuccessors());
        await Prerender(next);
    }

    int GetScore(PlayerId player)
    {
        return cells.Count(m => m == player);
    }
}
